/** 
 *  EMITTER HUFF EXERCISE
 *  
 *  The task is to enable this contract, when the function `value(uint256, uint256)` is called, should
 *  emit an event named `Value(uint256 indexed, uint256)`
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function value(uint256, uint256) payable returns()

#define event Value(uint256 indexed, uint256)

#define macro EMIT_VALUE() = takes(2) returns(0) {
  // [uint256] + uint256 stored at offset 0x00
  __EVENT_HASH(Value)         // [hash, uint256]
  0x20                        // [mem_end, hash, uint256]
  0x00                        // [mem_start, mem_end, hash, uint256]
  log2
}

#define macro MAIN() = takes(0) returns(0) {
  0x00 calldataload           // [calldata @ 0x00]
  0xe0 shr                    // [func_sig]

  __FUNC_SIG(value) eq emit_value jumpi

  0x00 0x00 revert

  emit_value:
    // Last uint is non-indexed so we'll store it and grab by offset later
    0x24 calldataload         // [num2]
    0x00 mstore               // []
    0x04 calldataload         // [num1]
    EMIT_VALUE()
}
