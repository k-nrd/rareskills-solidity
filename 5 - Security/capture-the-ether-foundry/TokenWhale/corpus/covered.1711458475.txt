/home/knrd/code/courses/rareskills-solidity/weeks8-11/capture-the-ether-foundry/TokenWhale/src/TestWhale.sol
  1 |     | // SPDX-License-Identifier: UNLICENSED
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import {TokenWhale} from "./TokenWhale.sol";
  5 |     | 
  6 | *or | contract TestWhale is TokenWhale {
  7 |     |     address echidna = msg.sender;
  8 |     | 
  9 |     |     event Debug(address who);
 10 |     | 
 11 |     |     constructor() TokenWhale(echidna) {}
 12 |     | 
 13 | *   |     function echidna_cannot_increase_balance() public returns (bool) {
 14 |     |         emit Debug(echidna);
 15 |     |         return !isComplete();
 16 |     |     }
 17 |     | }
 18 |     | 

/home/knrd/code/courses/rareskills-solidity/weeks8-11/capture-the-ether-foundry/TokenWhale/src/TokenWhale.sol
  1 |     | // SPDX-License-Identifier: UNLICENSED
  2 |     | pragma solidity ^0.8.13;
  3 |     | 
  4 |     | contract TokenWhale {
  5 |     |     address player;
  6 |     | 
  7 | *   |     uint256 public totalSupply;
  8 | *   |     mapping(address => uint256) public balanceOf;
  9 | *   |     mapping(address => mapping(address => uint256)) public allowance;
 10 |     | 
 11 | *   |     string public name = "Simple ERC20 Token";
 12 | *   |     string public symbol = "SET";
 13 | *   |     uint8 public decimals = 18;
 14 |     | 
 15 |     |     event Transfer(address indexed from, address indexed to, uint256 value);
 16 |     | 
 17 |     |     constructor(address _player) {
 18 |     |         player = _player;
 19 |     |         totalSupply = 1000;
 20 |     |         balanceOf[player] = 1000;
 21 |     |     }
 22 |     | 
 23 | *   |     function isComplete() public view returns (bool) {
 24 | *   |         return balanceOf[player] >= 1000000;
 25 |     |     }
 26 |     | 
 27 | *   |     function _transfer(address to, uint256 value) internal {
 28 |     |         unchecked {
 29 | *   |             balanceOf[msg.sender] -= value;
 30 | *   |             balanceOf[to] += value;
 31 |     |         }
 32 |     | 
 33 | *   |         emit Transfer(msg.sender, to, value);
 34 |     |     }
 35 |     | 
 36 | *   |     function transfer(address to, uint256 value) public {
 37 | *r  |         require(balanceOf[msg.sender] >= value);
 38 | *   |         require(balanceOf[to] + value >= balanceOf[to]);
 39 |     | 
 40 | *   |         _transfer(to, value);
 41 |     |     }
 42 |     | 
 43 |     |     event Approval(
 44 |     |         address indexed owner,
 45 |     |         address indexed spender,
 46 |     |         uint256 value
 47 |     |     );
 48 |     | 
 49 | *   |     function approve(address spender, uint256 value) public {
 50 | *   |         allowance[msg.sender][spender] = value;
 51 | *   |         emit Approval(msg.sender, spender, value);
 52 |     |     }
 53 |     | 
 54 | *   |     function transferFrom(address from, address to, uint256 value) public {
 55 | *r  |         require(balanceOf[from] >= value);
 56 | *   |         require(balanceOf[to] + value >= balanceOf[to]);
 57 | *r  |         require(allowance[from][msg.sender] >= value);
 58 |     | 
 59 | *   |         allowance[from][msg.sender] -= value;
 60 | *   |         _transfer(to, value);
 61 |     |     }
 62 |     | }
 63 |     | 
 64 |     | // Write your exploit contract below
 65 |     | contract ExploitContract {
 66 |     |     TokenWhale public tokenWhale;
 67 |     | 
 68 |     |     constructor(TokenWhale _tokenWhale) {
 69 |     |         tokenWhale = _tokenWhale;
 70 |     |     }
 71 |     | 
 72 |     |     // write your exploit functions below
 73 |     | }
 74 |     | 

