// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {GnosisSafe} from "safe-smart-account/GnosisSafe.sol";
import {GnosisSafeProxyFactory} from "safe-smart-account/proxies/GnosisSafeProxyFactory.sol";
import {WalletRegistry} from "../src/WalletRegistry.sol";
import {DamnValuableToken} from "../src/DamnValuableToken.sol";
import {BackdoorExploiter} from "../src/BackdoorExploiter.sol";

contract BackdoorExploiterTest is Test {
    uint256 constant AMOUNT_TOKENS_DISTRIBUTED = 40 ether;

    address registryOwner = address(6845747);
    address player;
    address[] users;

    GnosisSafe masterCopy;
    GnosisSafeProxyFactory walletFactory;
    DamnValuableToken token;
    WalletRegistry walletRegistry;

    function setUp() public {
        users.push(address(12345));
        users.push(address(12346));
        users.push(address(12347));
        users.push(address(12348));

        masterCopy = new GnosisSafe();
        walletFactory = new GnosisSafeProxyFactory();
        token = new DamnValuableToken();
        vm.prank(registryOwner);
        walletRegistry = new WalletRegistry(
            address(masterCopy),
            address(walletFactory),
            address(token),
            users
        );

        assertEq(walletRegistry.owner(), registryOwner);
        for (uint256 i = 0; i < users.length; i++) {
            assertTrue(walletRegistry.beneficiaries(users[i]));

            vm.startPrank(users[i]);
            vm.expectRevert();
            walletRegistry.addBeneficiary(users[i]);
            vm.stopPrank();
        }

        token.transfer(address(walletRegistry), AMOUNT_TOKENS_DISTRIBUTED);
    }

    function test_Attack() public {
        BackdoorExploiter exploiter = new BackdoorExploiter(
            address(walletRegistry)
        );

        exploiter.attack(player, users);

        for (uint256 i = 0; i < users.length; i++) {
            address wallet = walletRegistry.wallets(users[i]);
            assertTrue(wallet != address(0));
            assertTrue(walletRegistry.beneficiaries(users[i]) == false);
        }
        assertEq(token.balanceOf(player), AMOUNT_TOKENS_DISTRIBUTED);
    }
}
