/home/knrd/code/courses/rareskills-solidity/week4/exercises/exercise4/template.sol
  1 |     | // SPDX-License-Identifier: AGPL-3.0
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import "./token.sol";
  5 |     | 
  6 |     | /// @dev Run the template with
  7 |     | ///      ```
  8 |     | ///      solc-select use 0.8.0
  9 |     | ///      echidna program-analysis/echidna/exercises/exercise4/template.sol --contract TestToken --test-mode assertion
 10 |     | ///      ```
 11 |     | ///      or by providing a config
 12 |     | ///      ```
 13 |     | ///      echidna program-analysis/echidna/exercises/exercise4/template.sol --contract TestToken --config program-analysis/echidna/exercises/exercise4/config.yaml
 14 |     | ///      ```
 15 | *r  | contract TestToken is Token {
 16 | *   |     function transfer(address to, uint256 value) public override {
 17 |     |         // Pre-condition
 18 | *   |         uint256 initialBalance = balances[msg.sender];
 19 | *r  |         require(initialBalance >= value);
 20 |     | 
 21 |     |         // Action
 22 | *   |         super.transfer(to, value);
 23 |     | 
 24 |     |         // Post-condition
 25 | *   |         assert(balances[msg.sender] <= initialBalance);
 26 | *   |         assert(balances[to] >= value);
 27 |     |     }
 28 |     | }
 29 |     | 

/home/knrd/code/courses/rareskills-solidity/week4/exercises/exercise4/token.sol
  1 |     | // SPDX-License-Identifier: AGPL-3.0
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | contract Ownable {
  5 | *   |     address public owner = msg.sender;
  6 |     | 
  7 | *   |     function transferOwnership(address newOwner) public onlyOwner {
  8 | *   |         owner = newOwner;
  9 |     |     }
 10 |     | 
 11 |     |     modifier onlyOwner() {
 12 | *r  |         require(msg.sender == owner, "Ownable: Caller is not the owner.");
 13 |     |         _;
 14 |     |     }
 15 |     | }
 16 |     | 
 17 |     | contract Pausable is Ownable {
 18 |     |     bool private _paused;
 19 |     | 
 20 | *   |     function paused() public view returns (bool) {
 21 | *   |         return _paused;
 22 |     |     }
 23 |     | 
 24 | *   |     function pause() public onlyOwner {
 25 | *   |         _paused = true;
 26 |     |     }
 27 |     | 
 28 | *   |     function resume() public onlyOwner {
 29 | *   |         _paused = false;
 30 |     |     }
 31 |     | 
 32 |     |     modifier whenNotPaused() {
 33 | *r  |         require(!_paused, "Pausable: Contract is paused.");
 34 |     |         _;
 35 |     |     }
 36 |     | }
 37 |     | 
 38 |     | contract Token is Ownable, Pausable {
 39 | *   |     mapping(address => uint256) public balances;
 40 |     | 
 41 | *   |     function transfer(address to, uint256 value) public virtual whenNotPaused {
 42 |     |         // unchecked to save gas
 43 |     |         unchecked {
 44 | *   |             balances[msg.sender] -= value;
 45 | *   |             balances[to] += value;
 46 |     |         }
 47 |     |     }
 48 |     | }
 49 |     | 

