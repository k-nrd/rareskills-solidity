// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {UnstoppableVault} from "../src/Unstoppable.sol";
import {ReceiverUnstoppable} from "../src/ReceiverUnstoppable.sol";

contract UnstoppableExploiter is ReceiverUnstoppable {
    constructor(address _vault) ReceiverUnstoppable(_vault) {}

    // observations:
    // we just need to DoS the target
    //
    // plan:
    // we loan all their balance
    // deposit it into our own account in the pool
    // withdraw
    function attack() public {}

    function onFlashLoan(address initiator, address token, uint256 amount, uint256 fee, bytes calldata)
        external
        returns (bytes32)
    {
        if (initiator != address(this) || msg.sender != address(pool) || token != address(pool.asset()) || fee != 0) {
            revert UnexpectedFlashLoan();
        }

        ERC20(token).approve(address(pool), amount);

        return keccak256("IERC3156FlashBorrower.onFlashLoan");
    }

    receive() external payable {}
}
